// Lark Parser for the Sierra IR
// Inspired by: https://github.com/starkware-libs/cairo/blob/main/crates/sierra/src/parser.lalrpop
?start: program

program: type_declaration* libfunc_declaration* statement* function*

more_than: ">" 
less_than: "<" 

// Parse type declarations
boolean: "true"
       | "false"
type_parameters: "[storable: " boolean", drop: "boolean", dup: "boolean", zero_sized: "boolean"]"
?type_declaration: "type" concrete_type_id "=" concrete_type_long_id" "*type_parameters*";"
                 | "type" concrete_type_id "=" concrete_type_long_id";"
concrete_type_long_id: generic_type_id
                     | generic_type_id less_than generic_args more_than 

generic_type_id: path_label
               | "["unsigned_int"]"

concrete_type_id: concrete_label
                | "["unsigned_int"]"
concrete_type_ids: (concrete_type_id", ")*concrete_type_id
                 | concrete_type_id
                 | 

// Parse libfunc declarations
?libfunc_declaration: "libfunc" concrete_libfunc_id "=" concrete_libfunc_long_id";"
concrete_libfunc_long_id: generic_libfunc_id
                        | generic_libfunc_id less_than generic_args more_than 

generic_libfunc_id: path_label
                  | "["unsigned_int"]"

concrete_libfunc_id: concrete_label
                  | "["unsigned_int"]"

function_id: concrete_label
           | "["unsigned_int"]"

// Parse functions
function: function_id "@" statement_idx "("params")" "->" "("concrete_type_ids")"";"

param: var_id":"concrete_type_id
params: (param", ")*param
      | param 
      | 

user_type_id: concrete_label
            | "["unsigned_int"]"

var_id: basic_label
      | "["unsigned_int"]"
var_ids: (var_id", ")*var_id
       | var_id
       |

generic_arg: concrete_type_id
           | big_int
           | "user@"function_id
           | "ut@"user_type_id
           | "lib@"concrete_libfunc_id
           | "()"

generic_args: (generic_arg", ")*generic_arg
            | generic_arg
            | 

// Parse statements
statement: invocation
         | "return""("var_ids")"";"

statement_idx: unsigned_int

assignation_operator: "->"

invocation: concrete_libfunc_id"("var_ids")" assignation_operator "("var_ids")"";"
          | concrete_libfunc_id"("var_ids")""{"branch_info*"}"";"

branch_info: branch_target"("var_ids")"

fallthrough: "fallthrough"

branch_target: fallthrough
             | statement_idx

basic_label: /[@a-zA-Z_][a-zA-Z_0-9\[\]]*/

two_dots: "::"

path_label: basic_label
          | path_label two_dots basic_label

generic_args_string: generic_arg
                  | generic_args_string", "generic_arg
                  | generic_args_string","
                  | "("generic_args_string")"

concrete_label: (path_label two_dots less_than generic_args_string more_than two_dots?)*
              | (path_label two_dots less_than generic_args_string more_than two_dots?) concrete_label
              | path_label two_dots "<("generic_args_string")>"
              | path_label less_than generic_args_string more_than 
              | path_label

big_int: /-?[1-9][0-9]*|0/
unsigned_int: big_int 
signed_int: big_int

COMMENT: /\/\/[^\r\n]+/

%import common.WS
%ignore WS
%ignore COMMENT