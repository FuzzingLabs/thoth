type [2] = felt252;
type [6] = NonZero<[2]>;
type [0] = Struct<ut@Tuple>;
type [5] = Enum<ut@core::bool, [0], [0]>;
type [1] = Struct<ut@Tuple, [0]>;
type [3] = Array<[2]>;
type [4] = Enum<ut@core::PanicResult::<((),)>, [1], [3]>;

libfunc [21] = felt252_const<1>;
libfunc [25] = store_temp<[2]>;
libfunc [20] = felt252_sub;
libfunc [19] = felt252_is_zero;
libfunc [12] = branch_align;
libfunc [3] = struct_construct<[0]>;
libfunc [18] = enum_init<[5], 1>;
libfunc [15] = store_temp<[5]>;
libfunc [22] = jump;
libfunc [23] = drop<[6]>;
libfunc [17] = enum_init<[5], 0>;
libfunc [24] = felt252_const<6526862828254604054585768767079>;
libfunc [26] = rename<[5]>;
libfunc [6] = function_call<user@[0]>;
libfunc [5] = enum_match<[4]>;
libfunc [4] = struct_deconstruct<[1]>;
libfunc [13] = drop<[0]>;
libfunc [2] = struct_construct<[1]>;
libfunc [1] = enum_init<[4], 0>;
libfunc [16] = store_temp<[4]>;
libfunc [0] = enum_init<[4], 1>;
libfunc [10] = bool_not_impl;
libfunc [9] = enum_match<[5]>;
libfunc [14] = drop<[2]>;
libfunc [8] = array_new<[2]>;
libfunc [7] = array_append<[2]>;

[21]() -> ([0]);
[21]() -> ([1]);
[25]([0]) -> ([0]);
[20]([0], [1]) -> ([2]);
[25]([2]) -> ([2]);
[19]([2]) { fallthrough() 11([3]) };
[12]() -> ();
[3]() -> ([4]);
[18]([4]) -> ([5]);
[15]([5]) -> ([6]);
[22]() { 16() };
[12]() -> ();
[23]([3]) -> ();
[3]() -> ([7]);
[17]([7]) -> ([8]);
[15]([8]) -> ([6]);
[24]() -> ([9]);
[26]([6]) -> ([11]);
[25]([9]) -> ([12]);
[6]([11], [12]) -> ([10]);
[5]([10]) { fallthrough([13]) 29([14]) };
[12]() -> ();
[4]([13]) -> ([15]);
[13]([15]) -> ();
[3]() -> ([16]);
[2]([16]) -> ([17]);
[1]([17]) -> ([18]);
[16]([18]) -> ([19]);
return([19]);
[12]() -> ();
[0]([14]) -> ([20]);
[16]([20]) -> ([21]);
return([21]);
[10]([0]) -> ([2]);
[15]([2]) -> ([2]);
[9]([2]) { fallthrough([3]) 44([4]) };
[12]() -> ();
[13]([3]) -> ();
[14]([1]) -> ();
[3]() -> ([5]);
[2]([5]) -> ([6]);
[1]([6]) -> ([7]);
[16]([7]) -> ([8]);
return([8]);
[12]() -> ();
[13]([4]) -> ();
[8]() -> ([9]);
[7]([9], [1]) -> ([10]);
[0]([10]) -> ([11]);
[16]([11]) -> ([12]);
return([12]);

[1]@0() -> ([4]);
[0]@33([0]: [5], [1]: [2]) -> ([4]);
