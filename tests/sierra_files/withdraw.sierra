type [10] = GasBuiltin;
type [11] = System;
type [7] = ContractAddress;
type [8] = Struct<ut@Tuple, [7]>;
type [2] = felt252;
type [3] = Array<[2]>;
type [9] = Enum<ut@core::PanicResult::<(core::starknet::contract_address::ContractAddress,)>, [8], [3]>;
type [6] = NonZero<[2]>;
type [0] = Struct<ut@Tuple>;
type [5] = Enum<ut@core::bool, [0], [0]>;
type [1] = Struct<ut@Tuple, [0]>;
type [4] = Enum<ut@core::PanicResult::<((),)>, [1], [3]>;
type [12] = u64;
type [13] = Struct<ut@core::starknet::info::BlockInfo, [12], [12], [7]>;
type [14] = Box<[13]>;
type [15] = u128;
type [16] = Snapshot<[3]>;
type [17] = Struct<ut@core::array::Span::<core::felt252>, [16]>;
type [18] = Struct<ut@core::starknet::info::TxInfo, [2], [7], [15], [17], [2], [2], [2]>;
type [19] = Box<[18]>;
type [20] = Struct<ut@core::starknet::info::ExecutionInfo, [14], [19], [7], [7], [2]>;
type [21] = Box<[20]>;
type [22] = Struct<ut@Tuple, [21]>;
type [23] = Enum<ut@core::PanicResult::<(core::box::Box::<core::starknet::info::ExecutionInfo>,)>, [22], [3]>;
type [24] = Enum<ut@core::result::Result::<core::box::Box::<core::starknet::info::ExecutionInfo>, core::array::Array::<core::felt252>>, [21], [3]>;

libfunc [43] = store_temp<[10]>;
libfunc [44] = store_temp<[11]>;
libfunc [24] = function_call<user@[1]>;
libfunc [23] = enum_match<[9]>;
libfunc [12] = branch_align;
libfunc [22] = struct_deconstruct<[8]>;
libfunc [51] = dup<[7]>;
libfunc [21] = contract_address_to_felt252;
libfunc [20] = felt252_sub;
libfunc [54] = store_temp<[2]>;
libfunc [19] = felt252_is_zero;
libfunc [3] = struct_construct<[0]>;
libfunc [18] = enum_init<[5], 1>;
libfunc [15] = store_temp<[5]>;
libfunc [42] = jump;
libfunc [52] = drop<[6]>;
libfunc [17] = enum_init<[5], 0>;
libfunc [53] = felt252_const<37182682143656407735641701727546690853149416245978468>;
libfunc [55] = rename<[5]>;
libfunc [6] = function_call<user@[0]>;
libfunc [5] = enum_match<[4]>;
libfunc [4] = struct_deconstruct<[1]>;
libfunc [13] = drop<[0]>;
libfunc [2] = struct_construct<[1]>;
libfunc [1] = enum_init<[4], 0>;
libfunc [16] = store_temp<[4]>;
libfunc [0] = enum_init<[4], 1>;
libfunc [32] = function_call<user@[2]>;
libfunc [31] = enum_match<[23]>;
libfunc [30] = struct_deconstruct<[22]>;
libfunc [29] = unbox<[20]>;
libfunc [28] = struct_deconstruct<[20]>;
libfunc [47] = drop<[14]>;
libfunc [48] = drop<[19]>;
libfunc [49] = drop<[7]>;
libfunc [14] = drop<[2]>;
libfunc [27] = struct_construct<[8]>;
libfunc [26] = enum_init<[9], 0>;
libfunc [50] = store_temp<[9]>;
libfunc [25] = enum_init<[9], 1>;
libfunc [10] = bool_not_impl;
libfunc [9] = enum_match<[5]>;
libfunc [8] = array_new<[2]>;
libfunc [7] = array_append<[2]>;
libfunc [41] = get_execution_info_syscall;
libfunc [40] = enum_init<[24], 0>;
libfunc [45] = store_temp<[24]>;
libfunc [39] = enum_init<[24], 1>;
libfunc [46] = rename<[24]>;
libfunc [36] = function_call<user@[3]>;
libfunc [35] = struct_construct<[22]>;
libfunc [34] = enum_init<[23], 0>;
libfunc [38] = store_temp<[23]>;
libfunc [33] = enum_init<[23], 1>;
libfunc [37] = enum_match<[24]>;

[43]([0]) -> ([5]);
[44]([1]) -> ([6]);
[24]([5], [6]) -> ([2], [3], [4]);
[23]([4]) { fallthrough([7]) 43([8]) };
[12]() -> ();
[22]([7]) -> ([9]);
[51]([9]) -> ([9], [11]);
[21]([11]) -> ([10]);
[21]([9]) -> ([12]);
[20]([10], [12]) -> ([13]);
[54]([13]) -> ([13]);
[19]([13]) { fallthrough() 17([14]) };
[12]() -> ();
[3]() -> ([15]);
[18]([15]) -> ([16]);
[15]([16]) -> ([17]);
[42]() { 22() };
[12]() -> ();
[52]([14]) -> ();
[3]() -> ([18]);
[17]([18]) -> ([19]);
[15]([19]) -> ([17]);
[53]() -> ([20]);
[55]([17]) -> ([22]);
[54]([20]) -> ([23]);
[6]([22], [23]) -> ([21]);
[5]([21]) { fallthrough([24]) 37([25]) };
[12]() -> ();
[4]([24]) -> ([26]);
[13]([26]) -> ();
[3]() -> ([27]);
[2]([27]) -> ([28]);
[1]([28]) -> ([29]);
[43]([2]) -> ([30]);
[44]([3]) -> ([31]);
[16]([29]) -> ([32]);
return([30], [31], [32]);
[12]() -> ();
[0]([25]) -> ([33]);
[43]([2]) -> ([34]);
[44]([3]) -> ([35]);
[16]([33]) -> ([36]);
return([34], [35], [36]);
[12]() -> ();
[0]([8]) -> ([37]);
[43]([2]) -> ([38]);
[44]([3]) -> ([39]);
[16]([37]) -> ([40]);
return([38], [39], [40]);
[43]([0]) -> ([5]);
[44]([1]) -> ([6]);
[32]([5], [6]) -> ([2], [3], [4]);
[31]([4]) { fallthrough([7]) 67([8]) };
[12]() -> ();
[30]([7]) -> ([9]);
[29]([9]) -> ([10]);
[28]([10]) -> ([11], [12], [13], [14], [15]);
[47]([11]) -> ();
[48]([12]) -> ();
[49]([14]) -> ();
[14]([15]) -> ();
[27]([13]) -> ([16]);
[26]([16]) -> ([17]);
[43]([2]) -> ([18]);
[44]([3]) -> ([19]);
[50]([17]) -> ([20]);
return([18], [19], [20]);
[12]() -> ();
[25]([8]) -> ([21]);
[43]([2]) -> ([22]);
[44]([3]) -> ([23]);
[50]([21]) -> ([24]);
return([22], [23], [24]);
[10]([0]) -> ([2]);
[15]([2]) -> ([2]);
[9]([2]) { fallthrough([3]) 84([4]) };
[12]() -> ();
[13]([3]) -> ();
[14]([1]) -> ();
[3]() -> ([5]);
[2]([5]) -> ([6]);
[1]([6]) -> ([7]);
[16]([7]) -> ([8]);
return([8]);
[12]() -> ();
[13]([4]) -> ();
[8]() -> ([9]);
[7]([9], [1]) -> ([10]);
[0]([10]) -> ([11]);
[16]([11]) -> ([12]);
return([12]);
[41]([0], [1]) { fallthrough([2], [3], [4]) 98([5], [6], [7]) };
[12]() -> ();
[40]([4]) -> ([8]);
[43]([2]) -> ([9]);
[44]([3]) -> ([10]);
[45]([8]) -> ([11]);
[42]() { 103() };
[12]() -> ();
[39]([7]) -> ([12]);
[43]([5]) -> ([9]);
[44]([6]) -> ([10]);
[45]([12]) -> ([11]);
[46]([11]) -> ([14]);
[36]([14]) -> ([13]);
[31]([13]) { fallthrough([15]) 114([16]) };
[12]() -> ();
[30]([15]) -> ([17]);
[35]([17]) -> ([18]);
[34]([18]) -> ([19]);
[43]([9]) -> ([20]);
[44]([10]) -> ([21]);
[38]([19]) -> ([22]);
return([20], [21], [22]);
[12]() -> ();
[33]([16]) -> ([23]);
[43]([9]) -> ([24]);
[44]([10]) -> ([25]);
[38]([23]) -> ([26]);
return([24], [25], [26]);
[37]([0]) { fallthrough([1]) 126([2]) };
[12]() -> ();
[35]([1]) -> ([3]);
[34]([3]) -> ([4]);
[38]([4]) -> ([5]);
return([5]);
[12]() -> ();
[33]([2]) -> ([6]);
[38]([6]) -> ([7]);
return([7]);

[4]@0([0]: [10], [1]: [11]) -> ([10], [11], [4]);
[1]@49([0]: [10], [1]: [11]) -> ([10], [11], [9]);
[0]@73([0]: [5], [1]: [2]) -> ([4]);
[2]@91([0]: [10], [1]: [11]) -> ([10], [11], [23]);
[3]@120([0]: [24]) -> ([23]);
