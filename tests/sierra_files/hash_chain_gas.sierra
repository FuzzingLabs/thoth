type [0] = felt;
type [1] = NonZero<[0]>;
type [6] = BuiltinCosts;
type [2] = Array<[0]>;
type [3] = Enum<ut@core::PanicResult::<core::felt>, [0], [2]>;
type [5] = RangeCheck;
type [4] = GasBuiltin;
type [8] = Pedersen;
type [7] = Struct<ut@Tuple>;

libfunc [311] = revoke_ap_tracking;
libfunc [28] = dup<[0]>;
libfunc [0] = felt_jump_nz;
libfunc [29] = drop<[6]>;
libfunc [30] = drop<[0]>;
libfunc [11] = branch_align;
libfunc [12] = felt_const<0>;
libfunc [1] = enum_init<[3], 0>;
libfunc [16] = store_temp<[5]>;
libfunc [17] = store_temp<[4]>;
libfunc [18] = store_temp<[8]>;
libfunc [19] = store_temp<[3]>;
libfunc [20] = rename<[3]>;
libfunc [31] = drop<[1]>;
libfunc [32] = dup<[6]>;
libfunc [2] = get_gas_all;
libfunc [3] = struct_construct<[7]>;
libfunc [21] = rename<[5]>;
libfunc [13] = jump;
libfunc [33] = drop<[7]>;
libfunc [4] = array_new<[0]>;
libfunc [14] = felt_const<5197639>;
libfunc [22] = store_temp<[0]>;
libfunc [5] = array_append<[0]>;
libfunc [6] = enum_init<[3], 1>;
libfunc [15] = felt_const<1>;
libfunc [7] = felt_sub;
libfunc [23] = rename<[4]>;
libfunc [24] = rename<[0]>;
libfunc [25] = store_temp<[6]>;
libfunc [8] = function_call<user@[0]>;
libfunc [26] = store_temp<[7]>;
libfunc [9] = enum_match<[3]>;
libfunc [10] = pedersen;
libfunc [27] = rename<[8]>;

[311]() -> ();
[28]([3]) -> ([3], [54]);
[0]([54]) { fallthrough() 14([5]) };
[29]([4]) -> ();
[30]([3]) -> ();
[11]() -> ();
[12]() -> ([6]);
[1]([6]) -> ([7]);
[16]([0]) -> ([8]);
[17]([1]) -> ([9]);
[18]([2]) -> ([10]);
[19]([7]) -> ([7]);
[20]([7]) -> ([11]);
return([8], [9], [10], [11]);
[31]([5]) -> ();
[11]() -> ();
[32]([4]) -> ([4], [55]);
[2]([0], [1], [55]) { fallthrough([12], [13]) 24([14], [15]) };
[11]() -> ();
[3]() -> ([16]);
[16]([12]) -> ([12]);
[21]([12]) -> ([17]);
[17]([13]) -> ([18]);
[13]() { 41() };
[30]([3]) -> ();
[29]([4]) -> ();
[11]() -> ();
[3]() -> ([19]);
[33]([19]) -> ();
[4]() -> ([20]);
[14]() -> ([21]);
[22]([21]) -> ([21]);
[5]([20], [21]) -> ([22]);
[6]([22]) -> ([23]);
[16]([14]) -> ([14]);
[21]([14]) -> ([24]);
[17]([15]) -> ([25]);
[18]([2]) -> ([26]);
[19]([23]) -> ([23]);
[20]([23]) -> ([27]);
return([24], [25], [26], [27]);
[15]() -> ([28]);
[28]([3]) -> ([3], [56]);
[7]([56], [28]) -> ([29]);
[21]([17]) -> ([34]);
[23]([18]) -> ([35]);
[18]([2]) -> ([36]);
[22]([29]) -> ([29]);
[24]([29]) -> ([37]);
[25]([4]) -> ([38]);
[8]([34], [35], [36], [37], [38]) -> ([30], [31], [32], [33]);
[26]([16]) -> ([16]);
[33]([16]) -> ();
[9]([33]) { 54([39]) 57([40]) };
[11]() -> ();
[22]([39]) -> ([41]);
[13]() { 66() };
[30]([3]) -> ();
[11]() -> ();
[6]([40]) -> ([42]);
[16]([30]) -> ([43]);
[17]([31]) -> ([44]);
[18]([32]) -> ([45]);
[19]([42]) -> ([42]);
[20]([42]) -> ([46]);
return([43], [44], [45], [46]);
[10]([32], [41], [3]) -> ([47], [48]);
[1]([48]) -> ([49]);
[16]([30]) -> ([50]);
[17]([31]) -> ([51]);
[18]([47]) -> ([47]);
[27]([47]) -> ([52]);
[19]([49]) -> ([49]);
[20]([49]) -> ([53]);
return([50], [51], [52], [53]);

[0]@0([0]: [5], [1]: [4], [2]: [8], [3]: [0], [4]: [6]) -> ([5], [4], [8], [3]);

