type u128 = u128;
type Bitwise = Bitwise;
type RangeCheck = RangeCheck;
type Tuple<u128> = Struct<ut@Tuple, u128>;
type felt252 = felt252;
type Array<felt252> = Array<felt252>;
type core::PanicResult::<(core::integer::u128,)> = Enum<ut@core::PanicResult::<(core::integer::u128,)>, Tuple<u128>, Array<felt252>>;
type Unit = Struct<ut@Tuple>;
type Tuple<Unit> = Struct<ut@Tuple, Unit>;
type core::PanicResult::<((),)> = Enum<ut@core::PanicResult::<((),)>, Tuple<Unit>, Array<felt252>>;
type core::result::Result::<core::integer::u128, core::integer::u128> = Enum<ut@core::result::Result::<core::integer::u128, core::integer::u128>, u128, u128>;

libfunc u128_const<1234> = u128_const<1234>;
libfunc u128_const<5678> = u128_const<5678>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc dup<u128> = dup<u128>;
libfunc bitwise = bitwise;
libfunc drop<u128> = drop<u128>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc function_call<user@core::integer::U128Add::add> = function_call<user@core::integer::U128Add::add>;
libfunc store_temp<Bitwise> = store_temp<Bitwise>;
libfunc enum_match<core::PanicResult::<(core::integer::u128,)>> = enum_match<core::PanicResult::<(core::integer::u128,)>>;
libfunc branch_align = branch_align;
libfunc struct_deconstruct<Tuple<u128>> = struct_deconstruct<Tuple<u128>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc struct_construct<Tuple<Unit>> = struct_construct<Tuple<Unit>>;
libfunc enum_init<core::PanicResult::<((),)>, 0> = enum_init<core::PanicResult::<((),)>, 0>;
libfunc store_temp<core::PanicResult::<((),)>> = store_temp<core::PanicResult::<((),)>>;
libfunc enum_init<core::PanicResult::<((),)>, 1> = enum_init<core::PanicResult::<((),)>, 1>;
libfunc u128_overflowing_add = u128_overflowing_add;
libfunc enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 0> = enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 0>;
libfunc store_temp<core::result::Result::<core::integer::u128, core::integer::u128>> = store_temp<core::result::Result::<core::integer::u128, core::integer::u128>>;
libfunc jump = jump;
libfunc enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 1> = enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 1>;
libfunc felt252_const<39878429859757942499084499860145094553463> = felt252_const<39878429859757942499084499860145094553463>;
libfunc rename<core::result::Result::<core::integer::u128, core::integer::u128>> = rename<core::result::Result::<core::integer::u128, core::integer::u128>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc function_call<user@core::result::ResultTraitImpl::<core::integer::u128, core::integer::u128>::expect::<core::integer::u128Drop>> = function_call<user@core::result::ResultTraitImpl::<core::integer::u128, core::integer::u128>::expect::<core::integer::u128Drop>>;
libfunc struct_construct<Tuple<u128>> = struct_construct<Tuple<u128>>;
libfunc enum_init<core::PanicResult::<(core::integer::u128,)>, 0> = enum_init<core::PanicResult::<(core::integer::u128,)>, 0>;
libfunc store_temp<core::PanicResult::<(core::integer::u128,)>> = store_temp<core::PanicResult::<(core::integer::u128,)>>;
libfunc enum_init<core::PanicResult::<(core::integer::u128,)>, 1> = enum_init<core::PanicResult::<(core::integer::u128,)>, 1>;
libfunc enum_match<core::result::Result::<core::integer::u128, core::integer::u128>> = enum_match<core::result::Result::<core::integer::u128, core::integer::u128>>;
libfunc drop<felt252> = drop<felt252>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc drop<Unit> = drop<Unit>;

u128_const<1234>() -> ([2]);
u128_const<5678>() -> ([3]);
store_temp<u128>([2]) -> ([2]);
dup<u128>([2]) -> ([2], [8]);
store_temp<u128>([3]) -> ([3]);
dup<u128>([3]) -> ([3], [9]);
bitwise([1], [8], [9]) -> ([4], [5], [6], [7]);
drop<u128>([6]) -> ();
drop<u128>([7]) -> ();
dup<u128>([2]) -> ([2], [14]);
dup<u128>([3]) -> ([3], [15]);
bitwise([4], [14], [15]) -> ([10], [11], [12], [13]);
drop<u128>([11]) -> ();
drop<u128>([13]) -> ();
bitwise([10], [2], [3]) -> ([16], [17], [18], [19]);
drop<u128>([17]) -> ();
drop<u128>([18]) -> ();
store_temp<RangeCheck>([0]) -> ([22]);
store_temp<u128>([5]) -> ([23]);
store_temp<u128>([12]) -> ([24]);
function_call<user@core::integer::U128Add::add>([22], [23], [24]) -> ([20], [21]);
store_temp<u128>([19]) -> ([19]);
store_temp<Bitwise>([16]) -> ([16]);
enum_match<core::PanicResult::<(core::integer::u128,)>>([21]) { fallthrough([25]) 47([26]) };
branch_align() -> ();
struct_deconstruct<Tuple<u128>>([25]) -> ([27]);
store_temp<RangeCheck>([20]) -> ([30]);
store_temp<u128>([27]) -> ([31]);
store_temp<u128>([19]) -> ([32]);
function_call<user@core::integer::U128Add::add>([30], [31], [32]) -> ([28], [29]);
enum_match<core::PanicResult::<(core::integer::u128,)>>([29]) { fallthrough([33]) 41([34]) };
branch_align() -> ();
struct_deconstruct<Tuple<u128>>([33]) -> ([35]);
drop<u128>([35]) -> ();
struct_construct<Unit>() -> ([36]);
struct_construct<Tuple<Unit>>([36]) -> ([37]);
enum_init<core::PanicResult::<((),)>, 0>([37]) -> ([38]);
store_temp<RangeCheck>([28]) -> ([39]);
store_temp<Bitwise>([16]) -> ([40]);
store_temp<core::PanicResult::<((),)>>([38]) -> ([41]);
return([39], [40], [41]);
branch_align() -> ();
enum_init<core::PanicResult::<((),)>, 1>([34]) -> ([42]);
store_temp<RangeCheck>([28]) -> ([43]);
store_temp<Bitwise>([16]) -> ([44]);
store_temp<core::PanicResult::<((),)>>([42]) -> ([45]);
return([43], [44], [45]);
branch_align() -> ();
drop<u128>([19]) -> ();
enum_init<core::PanicResult::<((),)>, 1>([26]) -> ([46]);
store_temp<RangeCheck>([20]) -> ([47]);
store_temp<Bitwise>([16]) -> ([48]);
store_temp<core::PanicResult::<((),)>>([46]) -> ([49]);
return([47], [48], [49]);
u128_overflowing_add([0], [1], [2]) { fallthrough([3], [4]) 60([5], [6]) };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([3]) -> ([8]);
store_temp<core::result::Result::<core::integer::u128, core::integer::u128>>([7]) -> ([9]);
jump() { 64() };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u128, core::integer::u128>, 1>([6]) -> ([10]);
store_temp<RangeCheck>([5]) -> ([8]);
store_temp<core::result::Result::<core::integer::u128, core::integer::u128>>([10]) -> ([9]);
felt252_const<39878429859757942499084499860145094553463>() -> ([11]);
rename<core::result::Result::<core::integer::u128, core::integer::u128>>([9]) -> ([13]);
store_temp<felt252>([11]) -> ([14]);
function_call<user@core::result::ResultTraitImpl::<core::integer::u128, core::integer::u128>::expect::<core::integer::u128Drop>>([13], [14]) -> ([12]);
enum_match<core::PanicResult::<(core::integer::u128,)>>([12]) { fallthrough([15]) 76([16]) };
branch_align() -> ();
struct_deconstruct<Tuple<u128>>([15]) -> ([17]);
struct_construct<Tuple<u128>>([17]) -> ([18]);
enum_init<core::PanicResult::<(core::integer::u128,)>, 0>([18]) -> ([19]);
store_temp<RangeCheck>([8]) -> ([20]);
store_temp<core::PanicResult::<(core::integer::u128,)>>([19]) -> ([21]);
return([20], [21]);
branch_align() -> ();
enum_init<core::PanicResult::<(core::integer::u128,)>, 1>([16]) -> ([22]);
store_temp<RangeCheck>([8]) -> ([23]);
store_temp<core::PanicResult::<(core::integer::u128,)>>([22]) -> ([24]);
return([23], [24]);
enum_match<core::result::Result::<core::integer::u128, core::integer::u128>>([0]) { fallthrough([2]) 88([3]) };
branch_align() -> ();
drop<felt252>([1]) -> ();
struct_construct<Tuple<u128>>([2]) -> ([4]);
enum_init<core::PanicResult::<(core::integer::u128,)>, 0>([4]) -> ([5]);
store_temp<core::PanicResult::<(core::integer::u128,)>>([5]) -> ([6]);
return([6]);
branch_align() -> ();
drop<u128>([3]) -> ();
array_new<felt252>() -> ([7]);
array_append<felt252>([7], [1]) -> ([8]);
struct_construct<Unit>() -> ([9]);
drop<Unit>([9]) -> ();
enum_init<core::PanicResult::<(core::integer::u128,)>, 1>([8]) -> ([10]);
store_temp<core::PanicResult::<(core::integer::u128,)>>([10]) -> ([11]);
return([11]);

bitwise::bitwise::main@0([0]: RangeCheck, [1]: Bitwise) -> (RangeCheck, Bitwise, core::PanicResult::<((),)>);
core::integer::U128Add::add@54([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::PanicResult::<(core::integer::u128,)>);
core::result::ResultTraitImpl::<core::integer::u128, core::integer::u128>::expect::<core::integer::u128Drop>@81([0]: core::result::Result::<core::integer::u128, core::integer::u128>, [1]: felt252) -> (core::PanicResult::<(core::integer::u128,)>);
