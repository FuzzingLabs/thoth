type [2] = felt;
type [0] = Struct<ut@Tuple>;
type [1] = Enum<ut@core::bool, [0], [0]>;
type [3] = NonZero<[2]>;

libfunc [303] = revoke_ap_tracking;
libfunc [179] = felt_const<1>;
libfunc [298] = felt_neg;
libfunc [16] = store_temp<[2]>;
libfunc [204] = rename<[2]>;
libfunc [299] = function_call<user@[81]>;
libfunc [301] = felt_const<0>;
libfunc [302] = dup<[2]>;
libfunc [300] = function_call<user@[7]>;
libfunc [3] = enum_match<[1]>;
libfunc [46] = drop<[2]>;
libfunc [8] = drop<[0]>;
libfunc [6] = branch_align;
libfunc [7] = jump;
libfunc [177] = felt_add;
libfunc [13] = felt_sub;
libfunc [18] = function_call<user@[6]>;
libfunc [2] = rename<[1]>;
libfunc [11] = function_call<user@[2]>;
libfunc [14] = felt_jump_nz;
libfunc [4] = struct_construct<[0]>;
libfunc [5] = enum_init<[1], 1>;
libfunc [1] = store_temp<[1]>;
libfunc [17] = drop<[3]>;
libfunc [15] = enum_init<[1], 0>;
libfunc [10] = bool_not_impl;

[303]() -> ();
[179]() -> ([1]);
[298]([1]) -> ([2]);
[179]() -> ([3]);
[298]([3]) -> ([4]);
[16]([2]) -> ([2]);
[204]([2]) -> ([6]);
[16]([4]) -> ([4]);
[204]([4]) -> ([7]);
[16]([0]) -> ([8]);
[299]([6], [7], [8]) -> ([5]);
[298]([5]) -> ([9]);
[16]([9]) -> ([9]);
[204]([9]) -> ([10]);
return([10]);
[303]() -> ();
[301]() -> ([3]);
[302]([2]) -> ([2], [18]);
[16]([18]) -> ([5]);
[16]([3]) -> ([6]);
[300]([5], [6]) -> ([4]);
[3]([4]) { 22([7]) 28([8]) };
[46]([1]) -> ();
[46]([2]) -> ();
[8]([7]) -> ();
[6]() -> ();
[16]([0]) -> ([9]);
[7]() { 41() };
[8]([8]) -> ();
[6]() -> ();
[302]([1]) -> ([1], [19]);
[177]([0], [19]) -> ([10]);
[179]() -> ([11]);
[13]([2], [11]) -> ([12]);
[16]([1]) -> ([14]);
[16]([10]) -> ([10]);
[204]([10]) -> ([15]);
[16]([12]) -> ([12]);
[204]([12]) -> ([16]);
[299]([14], [15], [16]) -> ([13]);
[204]([13]) -> ([9]);
[204]([9]) -> ([17]);
return([17]);
[16]([0]) -> ([3]);
[16]([1]) -> ([4]);
[18]([3], [4]) -> ([2]);
[2]([2]) -> ([6]);
[11]([6]) -> ([5]);
[2]([5]) -> ([7]);
return([7]);
[13]([0], [1]) -> ([2]);
[16]([2]) -> ([2]);
[14]([2]) { fallthrough() 59([3]) };
[6]() -> ();
[4]() -> ([4]);
[5]([4]) -> ([5]);
[1]([5]) -> ([5]);
[2]([5]) -> ([6]);
[7]() { 65() };
[17]([3]) -> ();
[6]() -> ();
[4]() -> ([7]);
[15]([7]) -> ([8]);
[1]([8]) -> ([8]);
[2]([8]) -> ([6]);
[2]([6]) -> ([9]);
return([9]);
[10]([0]) -> ([1]);
[1]([1]) -> ([1]);
[2]([1]) -> ([2]);
return([2]);

[82]@0([0]: [2]) -> ([2]);
[81]@15([0]: [2], [1]: [2], [2]: [2]) -> ([2]);
[7]@43([0]: [2], [1]: [2]) -> ([1]);
[6]@50([0]: [2], [1]: [2]) -> ([1]);
[2]@67([0]: [1]) -> ([1]);

