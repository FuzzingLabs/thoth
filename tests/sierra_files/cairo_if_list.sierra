type felt = felt;
type Uninitialized<felt> = Uninitialized<felt>;
type RangeCheck = RangeCheck;
type Uninitialized<RangeCheck> = Uninitialized<RangeCheck>;
type NonZero<felt> = NonZero<felt>;
type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;
type u128 = u128;
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128>;

libfunc alloc_local<felt> = alloc_local<felt>;
libfunc alloc_local<RangeCheck> = alloc_local<RangeCheck>;
libfunc finalize_locals = finalize_locals;
libfunc felt_const<1> = felt_const<1>;
libfunc store_local<felt> = store_local<felt>;
libfunc dup<felt> = dup<felt>;
libfunc felt_sub = felt_sub;
libfunc store_temp<felt> = store_temp<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc branch_align = branch_align;
libfunc jump = jump;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_const<2> = felt_const<2>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc function_call<user@core::felt_gt> = function_call<user@core::felt_gt>;
libfunc store_local<RangeCheck> = store_local<RangeCheck>;
libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc drop<Unit> = drop<Unit>;
libfunc felt_const<3> = felt_const<3>;
libfunc function_call<user@core::felt_lt> = function_call<user@core::felt_lt>;
libfunc felt_const<4> = felt_const<4>;
libfunc function_call<user@core::felt_ge> = function_call<user@core::felt_ge>;
libfunc function_call<user@core::felt_le> = function_call<user@core::felt_le>;
libfunc felt_const<5> = felt_const<5>;
libfunc function_call<user@core::felt_ne> = function_call<user@core::felt_ne>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc rename<Unit> = rename<Unit>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc function_call<user@core::integer::u256_from_felt> = function_call<user@core::integer::u256_from_felt>;
libfunc store_temp<core::integer::u256> = store_temp<core::integer::u256>;
libfunc function_call<user@core::integer::u256_lt> = function_call<user@core::integer::u256_lt>;
libfunc function_call<user@core::bool_not> = function_call<user@core::bool_not>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc function_call<user@core::felt_eq> = function_call<user@core::felt_eq>;
libfunc u128s_from_felt = u128s_from_felt;
libfunc u128_const<0> = u128_const<0>;
libfunc struct_construct<core::integer::u256> = struct_construct<core::integer::u256>;
libfunc rename<core::integer::u256> = rename<core::integer::u256>;
libfunc dup<core::integer::u256> = dup<core::integer::u256>;
libfunc struct_deconstruct<core::integer::u256> = struct_deconstruct<core::integer::u256>;
libfunc drop<u128> = drop<u128>;
libfunc u128_lt = u128_lt;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc u128_eq = u128_eq;
libfunc drop<core::integer::u256> = drop<core::integer::u256>;
libfunc bool_not_impl = bool_not_impl;

alloc_local<felt>() -> ([2]);
alloc_local<RangeCheck>() -> ([4]);
alloc_local<RangeCheck>() -> ([6]);
alloc_local<RangeCheck>() -> ([8]);
alloc_local<RangeCheck>() -> ([10]);
finalize_locals() -> ();
felt_const<1>() -> ([1]);
felt_const<1>() -> ([11]);
store_local<felt>([2], [1]) -> ([1]);
dup<felt>([1]) -> ([1], [51]);
felt_sub([51], [11]) -> ([12]);
store_temp<felt>([12]) -> ([12]);
felt_jump_nz([12]) { fallthrough() 15([13]) };
branch_align() -> ();
jump() { 17() };
drop<NonZero<felt>>([13]) -> ();
branch_align() -> ();
felt_const<2>() -> ([14]);
store_temp<RangeCheck>([0]) -> ([16]);
dup<felt>([1]) -> ([1], [52]);
store_temp<felt>([52]) -> ([17]);
store_temp<felt>([14]) -> ([18]);
function_call<user@core::felt_gt>([16], [17], [18]) -> ([3], [15]);
store_local<RangeCheck>([4], [3]) -> ([3]);
enum_match<core::bool>([15]) { 25([19]) 28([20]) };
drop<Unit>([19]) -> ();
branch_align() -> ();
jump() { 30() };
drop<Unit>([20]) -> ();
branch_align() -> ();
felt_const<3>() -> ([21]);
store_temp<RangeCheck>([3]) -> ([23]);
dup<felt>([1]) -> ([1], [53]);
store_temp<felt>([53]) -> ([24]);
store_temp<felt>([21]) -> ([25]);
function_call<user@core::felt_lt>([23], [24], [25]) -> ([5], [22]);
store_local<RangeCheck>([6], [5]) -> ([5]);
enum_match<core::bool>([22]) { 38([26]) 41([27]) };
drop<Unit>([26]) -> ();
branch_align() -> ();
jump() { 43() };
drop<Unit>([27]) -> ();
branch_align() -> ();
felt_const<4>() -> ([28]);
store_temp<RangeCheck>([5]) -> ([30]);
dup<felt>([1]) -> ([1], [54]);
store_temp<felt>([54]) -> ([31]);
store_temp<felt>([28]) -> ([32]);
function_call<user@core::felt_ge>([30], [31], [32]) -> ([7], [29]);
store_local<RangeCheck>([8], [7]) -> ([7]);
enum_match<core::bool>([29]) { 51([33]) 54([34]) };
drop<Unit>([33]) -> ();
branch_align() -> ();
jump() { 56() };
drop<Unit>([34]) -> ();
branch_align() -> ();
felt_const<4>() -> ([35]);
store_temp<RangeCheck>([7]) -> ([37]);
dup<felt>([1]) -> ([1], [55]);
store_temp<felt>([55]) -> ([38]);
store_temp<felt>([35]) -> ([39]);
function_call<user@core::felt_le>([37], [38], [39]) -> ([9], [36]);
store_local<RangeCheck>([10], [9]) -> ([9]);
enum_match<core::bool>([36]) { 64([40]) 67([41]) };
drop<Unit>([40]) -> ();
branch_align() -> ();
jump() { 69() };
drop<Unit>([41]) -> ();
branch_align() -> ();
felt_const<5>() -> ([42]);
store_temp<felt>([1]) -> ([44]);
store_temp<felt>([42]) -> ([45]);
function_call<user@core::felt_ne>([44], [45]) -> ([43]);
enum_match<core::bool>([43]) { 74([46]) 77([47]) };
drop<Unit>([46]) -> ();
branch_align() -> ();
jump() { 79() };
drop<Unit>([47]) -> ();
branch_align() -> ();
struct_construct<Unit>() -> ([48]);
store_temp<RangeCheck>([9]) -> ([49]);
store_temp<Unit>([48]) -> ([48]);
rename<Unit>([48]) -> ([50]);
return([49], [50]);
store_temp<RangeCheck>([0]) -> ([5]);
store_temp<felt>([2]) -> ([6]);
store_temp<felt>([1]) -> ([7]);
function_call<user@core::felt_lt>([5], [6], [7]) -> ([3], [4]);
rename<RangeCheck>([3]) -> ([8]);
rename<core::bool>([4]) -> ([9]);
return([8], [9]);
store_temp<RangeCheck>([0]) -> ([5]);
store_temp<felt>([1]) -> ([6]);
function_call<user@core::integer::u256_from_felt>([5], [6]) -> ([3], [4]);
store_temp<RangeCheck>([3]) -> ([9]);
store_temp<felt>([2]) -> ([10]);
function_call<user@core::integer::u256_from_felt>([9], [10]) -> ([7], [8]);
store_temp<RangeCheck>([7]) -> ([13]);
store_temp<core::integer::u256>([4]) -> ([14]);
store_temp<core::integer::u256>([8]) -> ([15]);
function_call<user@core::integer::u256_lt>([13], [14], [15]) -> ([11], [12]);
rename<RangeCheck>([11]) -> ([16]);
rename<core::bool>([12]) -> ([17]);
return([16], [17]);
store_temp<RangeCheck>([0]) -> ([5]);
store_temp<felt>([1]) -> ([6]);
store_temp<felt>([2]) -> ([7]);
function_call<user@core::felt_lt>([5], [6], [7]) -> ([3], [4]);
rename<core::bool>([4]) -> ([9]);
function_call<user@core::bool_not>([9]) -> ([8]);
store_temp<RangeCheck>([3]) -> ([10]);
store_temp<core::bool>([8]) -> ([11]);
return([10], [11]);
store_temp<RangeCheck>([0]) -> ([5]);
store_temp<felt>([2]) -> ([6]);
store_temp<felt>([1]) -> ([7]);
function_call<user@core::felt_lt>([5], [6], [7]) -> ([3], [4]);
rename<core::bool>([4]) -> ([9]);
function_call<user@core::bool_not>([9]) -> ([8]);
store_temp<RangeCheck>([3]) -> ([10]);
store_temp<core::bool>([8]) -> ([11]);
return([10], [11]);
store_temp<felt>([0]) -> ([3]);
store_temp<felt>([1]) -> ([4]);
function_call<user@core::felt_eq>([3], [4]) -> ([2]);
rename<core::bool>([2]) -> ([6]);
function_call<user@core::bool_not>([6]) -> ([5]);
rename<core::bool>([5]) -> ([7]);
return([7]);
u128s_from_felt([0], [1]) { fallthrough([2], [3]) 138([4], [5], [6]) };
branch_align() -> ();
u128_const<0>() -> ([7]);
struct_construct<core::integer::u256>([3], [7]) -> ([8]);
store_temp<RangeCheck>([2]) -> ([2]);
rename<RangeCheck>([2]) -> ([9]);
store_temp<core::integer::u256>([8]) -> ([8]);
rename<core::integer::u256>([8]) -> ([10]);
jump() { 144() };
branch_align() -> ();
struct_construct<core::integer::u256>([6], [5]) -> ([11]);
store_temp<RangeCheck>([4]) -> ([4]);
rename<RangeCheck>([4]) -> ([9]);
store_temp<core::integer::u256>([11]) -> ([11]);
rename<core::integer::u256>([11]) -> ([10]);
rename<RangeCheck>([9]) -> ([12]);
rename<core::integer::u256>([10]) -> ([13]);
return([12], [13]);
alloc_local<RangeCheck>() -> ([4]);
finalize_locals() -> ();
dup<core::integer::u256>([1]) -> ([1], [51]);
struct_deconstruct<core::integer::u256>([51]) -> ([5], [6]);
drop<u128>([5]) -> ();
dup<core::integer::u256>([2]) -> ([2], [52]);
struct_deconstruct<core::integer::u256>([52]) -> ([7], [8]);
drop<u128>([7]) -> ();
u128_lt([0], [6], [8]) { fallthrough([9]) 164([10]) };
branch_align() -> ();
struct_construct<Unit>() -> ([11]);
enum_init<core::bool, 0>([11]) -> ([12]);
store_temp<RangeCheck>([9]) -> ([9]);
rename<RangeCheck>([9]) -> ([3]);
store_temp<core::bool>([12]) -> ([12]);
rename<core::bool>([12]) -> ([13]);
jump() { 171() };
branch_align() -> ();
struct_construct<Unit>() -> ([14]);
enum_init<core::bool, 1>([14]) -> ([15]);
store_temp<RangeCheck>([10]) -> ([10]);
rename<RangeCheck>([10]) -> ([3]);
store_temp<core::bool>([15]) -> ([15]);
rename<core::bool>([15]) -> ([13]);
store_local<RangeCheck>([4], [3]) -> ([3]);
enum_match<core::bool>([13]) { 173([16]) 231([17]) };
drop<Unit>([16]) -> ();
branch_align() -> ();
dup<core::integer::u256>([1]) -> ([1], [53]);
struct_deconstruct<core::integer::u256>([53]) -> ([18], [19]);
drop<u128>([18]) -> ();
dup<core::integer::u256>([2]) -> ([2], [54]);
struct_deconstruct<core::integer::u256>([54]) -> ([20], [21]);
drop<u128>([20]) -> ();
u128_eq([19], [21]) { fallthrough() 188() };
branch_align() -> ();
struct_construct<Unit>() -> ([22]);
enum_init<core::bool, 0>([22]) -> ([23]);
store_temp<core::bool>([23]) -> ([23]);
rename<core::bool>([23]) -> ([24]);
jump() { 193() };
branch_align() -> ();
struct_construct<Unit>() -> ([25]);
enum_init<core::bool, 1>([25]) -> ([26]);
store_temp<core::bool>([26]) -> ([26]);
rename<core::bool>([26]) -> ([24]);
enum_match<core::bool>([24]) { 194([27]) 204([28]) };
drop<core::integer::u256>([1]) -> ();
drop<core::integer::u256>([2]) -> ();
drop<Unit>([27]) -> ();
branch_align() -> ();
struct_construct<Unit>() -> ([29]);
enum_init<core::bool, 0>([29]) -> ([30]);
store_temp<RangeCheck>([3]) -> ([31]);
store_temp<core::bool>([30]) -> ([30]);
rename<core::bool>([30]) -> ([32]);
jump() { 228() };
drop<Unit>([28]) -> ();
branch_align() -> ();
struct_deconstruct<core::integer::u256>([1]) -> ([33], [34]);
drop<u128>([34]) -> ();
struct_deconstruct<core::integer::u256>([2]) -> ([35], [36]);
drop<u128>([36]) -> ();
u128_lt([3], [33], [35]) { fallthrough([37]) 219([38]) };
branch_align() -> ();
struct_construct<Unit>() -> ([39]);
enum_init<core::bool, 0>([39]) -> ([40]);
store_temp<RangeCheck>([37]) -> ([37]);
rename<RangeCheck>([37]) -> ([41]);
store_temp<core::bool>([40]) -> ([40]);
rename<core::bool>([40]) -> ([42]);
jump() { 226() };
branch_align() -> ();
struct_construct<Unit>() -> ([43]);
enum_init<core::bool, 1>([43]) -> ([44]);
store_temp<RangeCheck>([38]) -> ([38]);
rename<RangeCheck>([38]) -> ([41]);
store_temp<core::bool>([44]) -> ([44]);
rename<core::bool>([44]) -> ([42]);
rename<RangeCheck>([41]) -> ([31]);
rename<core::bool>([42]) -> ([32]);
rename<RangeCheck>([31]) -> ([45]);
rename<core::bool>([32]) -> ([46]);
jump() { 240() };
drop<core::integer::u256>([1]) -> ();
drop<core::integer::u256>([2]) -> ();
drop<Unit>([17]) -> ();
branch_align() -> ();
struct_construct<Unit>() -> ([47]);
enum_init<core::bool, 1>([47]) -> ([48]);
store_temp<RangeCheck>([3]) -> ([45]);
store_temp<core::bool>([48]) -> ([48]);
rename<core::bool>([48]) -> ([46]);
rename<RangeCheck>([45]) -> ([49]);
rename<core::bool>([46]) -> ([50]);
return([49], [50]);
bool_not_impl([0]) -> ([1]);
store_temp<core::bool>([1]) -> ([1]);
rename<core::bool>([1]) -> ([2]);
return([2]);
felt_sub([0], [1]) -> ([2]);
store_temp<felt>([2]) -> ([2]);
felt_jump_nz([2]) { fallthrough() 256([3]) };
branch_align() -> ();
struct_construct<Unit>() -> ([4]);
enum_init<core::bool, 1>([4]) -> ([5]);
store_temp<core::bool>([5]) -> ([5]);
rename<core::bool>([5]) -> ([6]);
jump() { 262() };
drop<NonZero<felt>>([3]) -> ();
branch_align() -> ();
struct_construct<Unit>() -> ([7]);
enum_init<core::bool, 0>([7]) -> ([8]);
store_temp<core::bool>([8]) -> ([8]);
rename<core::bool>([8]) -> ([6]);
rename<core::bool>([6]) -> ([9]);
return([9]);

cairo_if_list::cairo_if_list::call_if_list@0([0]: RangeCheck) -> (RangeCheck, Unit);
core::felt_gt@84([0]: RangeCheck, [1]: felt, [2]: felt) -> (RangeCheck, core::bool);
core::felt_lt@91([0]: RangeCheck, [1]: felt, [2]: felt) -> (RangeCheck, core::bool);
core::felt_ge@104([0]: RangeCheck, [1]: felt, [2]: felt) -> (RangeCheck, core::bool);
core::felt_le@113([0]: RangeCheck, [1]: felt, [2]: felt) -> (RangeCheck, core::bool);
core::felt_ne@122([0]: felt, [1]: felt) -> (core::bool);
core::integer::u256_from_felt@129([0]: RangeCheck, [1]: felt) -> (RangeCheck, core::integer::u256);
core::integer::u256_lt@147([0]: RangeCheck, [1]: core::integer::u256, [2]: core::integer::u256) -> (RangeCheck, core::bool);
core::bool_not@243([0]: core::bool) -> (core::bool);
core::felt_eq@247([0]: felt, [1]: felt) -> (core::bool);
