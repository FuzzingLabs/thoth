type Unit = Struct<ut@Tuple>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;
type felt252 = felt252;

libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc bool_or_impl = bool_or_impl;
libfunc bool_not_impl = bool_not_impl;
libfunc bool_and_impl = bool_and_impl;
libfunc bool_xor_impl = bool_xor_impl;
libfunc bool_to_felt252 = bool_to_felt252;
libfunc store_temp<felt252> = store_temp<felt252>;

struct_construct<Unit>() -> ([0]);
enum_init<core::bool, 1>([0]) -> ([1]);
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([1]) -> ([1]);
store_temp<core::bool>([3]) -> ([3]);
bool_or_impl([1], [3]) -> ([4]);
struct_construct<Unit>() -> ([5]);
enum_init<core::bool, 0>([5]) -> ([6]);
store_temp<core::bool>([6]) -> ([6]);
bool_not_impl([6]) -> ([7]);
store_temp<core::bool>([7]) -> ([7]);
bool_not_impl([7]) -> ([8]);
store_temp<core::bool>([4]) -> ([4]);
store_temp<core::bool>([8]) -> ([8]);
bool_and_impl([4], [8]) -> ([9]);
struct_construct<Unit>() -> ([10]);
enum_init<core::bool, 0>([10]) -> ([11]);
store_temp<core::bool>([9]) -> ([9]);
store_temp<core::bool>([11]) -> ([11]);
bool_xor_impl([9], [11]) -> ([12]);
bool_to_felt252([12]) -> ([13]);
store_temp<felt252>([13]) -> ([14]);
return([14]);

boolean::boolean::main@0() -> (felt252);
